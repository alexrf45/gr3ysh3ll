#!/bin/bash

# gr3ysh3ll is a simple bash wrapper with no dependencies outside of a standard bash shell

BOLDGREEN="\e[1;${GREEN}m"
BOLDYELLOW="\e[1;${YELLOW}m"

image=$3
project=$2

#starts a container with host networking, X11 and a shared volume
start_container() {
  mkdir -p $project/{recon,www,exploit,pivot,privesc,report} &&
    cd $project &&
    mkdir .gr3ysh3ll-logs &&
    docker run --name $project -it \
      --net=host --entrypoint=/bin/zsh \
      --cap-add=NET_ADMIN \
      --cap-add=CAP_SYS_TIME \
      --device=/dev/dri:/dev/dri \
      -e DISPLAY=$DISPLAY -e DOMAIN=$DOMAIN \
      -e TARGET=$project -e IP=$IP -e TZ=$TZ -e NAME=$project \
      -v $(pwd)/.gr3ysh3ll-logs:$HOME/.logs:rw -v $(pwd):/$project \
      -v $HOME/.Xauthority:$HOME/.Xauthority \
      -v /tmp/.X11-unix:/tmp/.X11-unix \
      -w /$project fonalex45/gr3ysh3ll:$image
}

# starts the container if stopped and enters it
enter() {
  docker container start $project >/dev/null 2>&1 &&
    docker exec -it $project /bin/zsh
}

#stops container
stop() {
  docker container stop $project >/dev/null 2>&1
}

#destroys contaienr and removes shared volume
destroy() {
  docker container rm $project && rm -r $project
}

#backs up shared volume and compresses it. useful for saving engagement artifacts
backup() {
  zip -e "$(date '+%Y-%m-%d_%H-%M-%S%z(%Z)')_$project.zip" $project
}

#pulls latest or dev image
pull() {
  docker pull fonalex45/gr3ysh3ll:latest
}
dev() {
  docker pull fonalex45/gr3ysh3ll:dev
}

#help menu
show_help() {
  tag=$(git ls-remote --tags --sort="v:refname" https://github.com/alexrf45/gr3ysh3ll.git |
    grep -o 'refs/tags/v.*' |
    sed 's|refs/tags/||' |
    grep -v '\^{}' |
    tail -n 1)

  echo " ░▒▓██████▓▒░  ░▒▓███████▓▒░  ░▒▓███████▓▒░  ░▒▓█▓▒░░▒▓█▓▒░  ░▒▓███████▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓███████▓▒░  ░▒▓█▓▒░        ░▒▓█▓▒░        "
  echo "░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░        ░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░░▒▓█▓▒░        ░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░        "
  echo "░▒▓█▓▒░        ░▒▓█▓▒░░▒▓█▓▒░        ░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░░▒▓█▓▒░        ░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░        "
  echo "░▒▓█▓▒▒▓███▓▒░ ░▒▓███████▓▒░  ░▒▓███████▓▒░   ░▒▓██████▓▒░   ░▒▓██████▓▒░  ░▒▓████████▓▒░ ░▒▓███████▓▒░  ░▒▓█▓▒░        ░▒▓█▓▒░        "
  echo "░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░        ░▒▓█▓▒░    ░▒▓█▓▒░            ░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░        ░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░        "
  echo "░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░        ░▒▓█▓▒░    ░▒▓█▓▒░            ░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░        ░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░        "
  echo " ░▒▓██████▓▒░  ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓███████▓▒░     ░▒▓█▓▒░     ░▒▓███████▓▒░  ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓███████▓▒░  ░▒▓████████▓▒░ ░▒▓████████▓▒░ "
  echo "                                                                                                                                       "
  echo "                                                                                                                                       "

  echo -e " ${BOLDGREEN}
      Current Image version: \e[3m$tag\e[0m
${BOLDYELLOW}
gr3ysh3ll start <project name> - start a container
gr3ysh3ll stop <project name> - stop a container
gr3ysh3ll enter <project name> - enter running container
gr3ysh3ll destory <project name> - destory a container
gr3ysh3ll backup <project name> - backup shared volume
gr3ysh3ll pull <image tag> - update to latest image
gr3ysh3ll dev - update dev image
gr3ysh3ll help - view this help menu
      "
}

# Parse the command-line arguments
case "$1" in
"start")
  start_container $2 $3
  ;;
"enter")
  enter $2
  ;;
"stop")
  stop $2
  ;;
"destroy")
  destroy $2
  ;;
"backup")
  backup $2
  ;;
"pull")
  pull
  ;;
"dev")
  dev
  ;;
"help")
  show_help
  ;;
*)
  show_help
  exit 1
  ;;
esac
